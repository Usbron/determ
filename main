#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

int NFASTATE = 0;
int newState() {
    return NFASTATE++;
}

template<typename T>
void dfs(int v, T& nfa, set<int>& visited) {
    visited.insert(v); // добавляет текущую вершину `v` в множество посещенных вершин
    for (auto& edge : nfa[v]) {
        int nextVertex = edge.second; // получает следующую вершину, в которую ведет текущее ребро.
        if (visited.find(nextVertex) == visited.end()) { // проверяет, была ли уже посещена следующая вершина
            dfs(nextVertex, nfa, visited); // рекурсивно вызывает функцию `dfs` для следующей вершины
        }
    }
}

template<typename T>
map<char, set<int>> transitions(set<int>& source, T& g) {
    map<char, set<int>> outside;
    // Перебираем каждую исходную вершину
    for (auto& v : source) {
        // Перебираем все исходящие рёбра
        for (auto& edge : g[v]) {
            if (edge.first == '-') {
                continue;
            }
            outside[edge.first].insert(edge.second); //сохраняем подходящее ребро
        }
    }
    // расширить каждый набор вершин
    // переходами по пустым рёбрам
    for (auto& p : outside) { // ключ - символ перехода, значение - множество достижимых вершин

        set<int> expanded; // расширенный набор вершин для текущего символа перехода

        for (auto& v : p.second) { // проходит по каждой вершине v в текущем множестве достижимых вершин p.second
                                  //для текущего символа перехода p.first

            expanded.insert(v);  // добавляем вершину в расширенный набор

            for (auto& edge : g[v]) { // проходит по каждой вершине v в текущем множестве достижимых вершин p.second 
                                     //для текущего символа перехода p.first

                if (edge.first == '-') {
                    expanded.insert(edge.second);   

                }
            }
        }
        p.second = expanded;  //Обновляется значение множества достижимых вершин p.second в outside
                             //на расширенный набор вершин expanded для текущего символа перехода p.first
    }

    return outside;     //выполняет поиск всех достижимых вершин из заданного набора вершин source по ребрам графа g
                       //и формирует outside, где каждому символу перехода соответствует множество достижимых вершин.
}
int main() {
    setlocale(LC_ALL, "Russian");
    string expr;
    cout << "Введите регулярное выражение: ";
    cin >> expr;

    vector< vector< pair< char, int > > > nfa;
    vector< pair< int, int > > parts;

    int start = newState();
    nfa.push_back({});
    parts.push_back({ start, start });
    //НКА
    for (auto& x : expr) {
        if ('a' <= x && x <= 'z') {
            int st = newState();
            int st1 = newState();
            nfa.push_back({ {'-', st} });
            nfa.push_back({ {x, st1} });
            parts.push_back({ st, st1 });
        }
        else if (x == '*') {
            int st = newState();
            nfa.push_back({ {' ', st} });
            nfa.push_back({ {' ', st} });
            nfa.push_back({ {' ', st - 2} });
            parts.push_back({ st, st });
        }
    }
    int j = 0;
    int finish = parts[parts.size() - 1].second;
    cout << "НКА старт: " << start << "; финиш: " << finish << endl;
    // Вывод НКА списком ребер
    for (int i = 0; i < nfa.size(); i++) {
        for (auto& edge : nfa[i]) {
            char c = edge.first;
            int u = edge.second;
            if (c == ' ') {
                if (j == 0) {
                    cout << u - 2 << ' ' << '-' << ' ' << u << endl;
                }
                else if (j == 1) {
                    cout << u - 1 << ' ' << '-' << ' ' << u << endl;
                }
                else {
                    cout << u + 2 << ' ' << '-' << ' ' << u << endl;
                }
                if (j == 3) {
                    j = 0;
                }
                j++;
            }
            else if (c != '-') {
                cout << u - 1 << ' ' << c << ' ' << u << endl;
            }
            else if (c == '-') {
                cout << u - 1 << ' ' << c << ' ' << u << endl;
            }
        }
    }

    for (auto& vec : nfa) {
        for (auto& edge : vec) {
            if (edge.first == ' ') {
                edge.first = '-';
            }
        }
    }

    using V = set<int>; // Определяем тип данных вершин нового графа
    map< V, vector< pair< char, V > > > dfa; 
    set< V > analyzed; // какие вершины уже были полностью обработаны
    queue< V > q; // Очередь вершин для запоминания вершин, которые необходимо обработать

    V newStart; // хранение начального состояния ДКА
    dfs(start, nfa, newStart); // обход НКА и сохраняя результат в newStart
    q.push(newStart); // добавляет начальное состояние newStart в очередь q для дальнейшего обхода.

    while (not q.empty()) {
        V v = q.front(); //сохраняем в v первый элемент 
        q.pop(); // удаляет первый элемент из очереди 

        if (analyzed.count(v) > 0) { // проверяем было ли состояние обработано, если да то пропускает текущую итерацию цикла
            continue;
        }

        analyzed.insert(v); // добавляем v для отметки что было обработано 
        map<char, set<int>> trans = transitions(v, nfa); // получение переходов из состояния v в НКА 

        for (auto& p : trans) {
            char c = p.first; // символ перехода 
            set<int>& nextVertices = p.second; // множество следующих вершин из пары 

            dfa[v].push_back({ c, nextVertices }); 
            if (analyzed.count(nextVertices) == 0) { // проверяем было ли множество след вершин уже обработано, 
                                                    //если нет то добавляем для дальнейшего обхода
                q.push(nextVertices);
            }
        }
    }

    map< V, int > numbering; //нумерацию вершин нового графа
    int count = 0;
    for (auto& p : dfa) {
        numbering[p.first] = count++;
    }

    vector<int> newFinish; // новое финальное состояние 
    for (auto& p : numbering) {
        V v = p.first;
        for (auto& state : v) {
            if (state == finish) { //равно ли текущее финальному 
                newFinish.push_back(p.second);
                break;
            }
        }
    }

    cout << "ДКА старт: " << numbering[newStart] << "; финиш:";
    for (auto& v : newFinish) {
        cout << " " << v;
    }
    cout << endl;

    for (auto& p : dfa) {
        V v = p.first;  // текущее состояние 
        int from = numbering[v]; // из какого состояния 
        for (auto& edge : p.second) {
            char c = edge.first; // символ перехода
            V nextVertices = edge.second; //получаем след состояние
            int to = numbering[nextVertices]; //в какое переход
            cout << from << " " << c << " " << to << endl; // выводим переход из from по символу c в to 
        }
    }

    return 0;
}
